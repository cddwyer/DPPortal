#!/bin/bash

#######Bootstrap Script#########

#Written by Double_D  - Sometime in March 2024

### Check for auto run flag arguement
arArg=$1


###Lets gather some vars

#Custom hosts file
dppHosts="/etc/dpportal/config/dpphosts"

#Quick start config file path
quickStartFile="/etc/dpportal/config/quickstart.cfg"

#Init blank vars
useSSID=""
useInt=""
useChan=""
useFreq=""
useBSSID=""
useDriver=""
useShowClients=""
useType=""

##Colours and formatting for stdOut and stdErr
warn="\e[1;31m"      # warning (red)
info="\e[1;34m"      # info (blue)
q="\e[1;32m"         # questions (green)


###Some more colour and formatting vars, some may become redundant as I continue to dev and tidy up my project
_bold=$(tput bold)
_underline=$(tput sgr 0 1)
_reset=$(tput sgr0)
_purple=$(tput setaf 171)
_red=$(tput setaf 1)
_green=$(tput setaf 76)
_tan=$(tput setaf 3)
_blue=$(tput setaf 38)


#Check if running as root first
scriptUser=$(id -u)
if [[ $scriptUser -ne 0 ]]; then
	echo -e "$warn\nThis script needs to be run with sudo privileges. Exiting, no changes have been made...\n"
	_die "Insufficiently privileged! Bye."
fi

#Function that prints arrows and formats stdout stuff then arguement (just bells and whistles)
function _arrow()
{
    printf "➜ $@\n"
}

function _success()
{
    printf "${_green}✔ %s${_reset}\n" "$@"
}

function _error() {
    printf "${_red}✖ %s${_reset}\n" "$@"
}

function _die()
{
    _error "$@"
    exit 1
}

function _safeExit()
{
    exit 0
}

trap ctrl_c INT TERM

function ctrl_c()
{
	echo -n -e "$infoExiting DP_Portal."
	for i in $(seq 1 5)
    do
		sleep 1
        if [[ $i -eq 1 ]]; then
        	kill $thisBeratePID
		fi
        
        if [[ $i -eq 2 ]]; then
        	a2dissite dpportal.conf
		fi

        if [[ $i -eq 3 ]]; then
        	a2dissite dppdisplay.conf
		fi

        if [[ $i -eq 4 ]]; then
        	systemctl reload apache2
		fi
        
        if [[ $i -eq 5 ]]; then
        	echo -e "$infoThank you for using the DP-Portal!"
           	echo -n "."
            sleep 2
            echo -n "."
            sleep 1
            echo -n "."
            sleep 0.5
		fi
		echo -n "."
	done
    systemctl stop apache2
	clear
	echo "$info\n\nIt's been emotional, see you later."
    exit 0

}

function configExists()
{
	dppOutLog="/etc/dpportal/logs/$dppOutLogName"
	dppErrLog="/etc/dpportal/logs/$dppErrLogName"
	if [[ -r "$quickStartFile" ]]; then
        quickExists=1
		loadQuickStart
	else
		echo "Cannot read values from config file or file does not exist" >> $dppErrLog
		_error "Quick start file doesn't exist or is not readable."
        quickExists=0
        _die "You done fucked up and I'm out..!"
	fi
}


function loadQuickStart()
{

	#Get values from quick start file
	if [[ "$quickExists" -eq 1 ]]; then
    	qFile=/etc/dpportal/config/quickstart.cfg
	else
    	echo "Quick start config file doesn't exist."  >> $dppErrLog
        _die "You tried to start with a quick start config file that doesn't exist! Weirdo."
	fi
    
    #Get values from config file and put them into vars
	useSSID=$(cat $qFile | grep '^SSID' | sed 's/SSID=//g')
	useInt=$(cat $qFile | grep '^INTERFACE' | sed 's/INTERFACE=//g')
	useChan=$(cat $qFile | grep '^CHANNEL' | sed 's/CHANNEL=//g')
	useFreq=$(cat $qFile | grep '^FREQUENCY' | sed 's/FREQUENCY=//g')
	useBSSID=$(cat $qFile | grep '^BSSID' | sed 's/BSSID=//g')
	useDriver=$(cat $qFile | grep '^DRIVER' | sed 's/DRIVER=//g')
	useShowClients=$(cat $qFile | grep '^SHOWCLIENTS' | sed 's/SHOWCLIENTS=//g')
	useType=$(cat $qFile | grep '^USETYPE' | sed 's/USETYPE=//g')
    
    #Set initial hard opts and args
	allOptsArgs="-e $dppHosts -n --redirect-to-localhost"
	
    #Check vars aren't null or white space then add to the opts/args string
    if [[ ! -z "$useChan" && "$useChan" != " " ]]; then
		allOptsArgs+=" -c $useChan"
	fi
    
    if [[ ! -z "$useFreq" && "$useFreq" != " " ]]; then
		allOptsArgs+=" --freq-band $useFreq"
	fi

	if [[ ! -z "$useBSSID" && "$useBSSID" != " " ]]; then
		allOptsArgs+=" --mac $useBSSID"
	fi
	
    if [[ ! -z "$useDriver" && "$useDriver" != " " ]]; then
		allOptsArgs+=" --driver $useDriver"
	fi
    
	if [[ ! -z "$useShowClients" && "$useShowClients" != " " ]]; then
		openClients=1
	fi
    
    #Set one wifi type only
	if [[ ! -z "$useType" && "$useType" != " " ]]; then
		
        if [[ "$useType" == "AC" ]]; then
        	allOptsArgs+=" --ieee80211ac"
		fi
        
        if [[ "$useType" == "N" ]]; then
        	allOptsArgs+=" --ieee80211n"
        fi
    fi
    allOptsArgs+=" $useInt $useSSID"
    

}


function _printPoweredBy()
{
    cat <<"EOF"



  _____  _____        _____   ____  _____ _______       _      
 |  __ \|  __ \      |  __ \ / __ \|  __ \__   __|/\   | |     
 | |  | | |__) |_____| |__) | |  | | |__) | | |  /  \  | |     
 | |  | |  ___/______|  ___/| |  | |  _  /  | | / /\ \ | |     
 | |__| | |          | |    | |__| | | \ \  | |/ ____ \| |____ 
 |_____/|_|          |_|     \____/|_|  \_\ |_/_/    \_\______|
                                                               

  written by: Double_D




################################################################
EOF
sleep 1
}


function askQuestions()
{
	#Set hard arguements
    allOptsArgs=" -e $dppHosts -n --redirect-to-localhost"
    useWifiT=0
    #Set optional args and opts
  
	echo "What would you like to call this network? e.g. Free Wifi (required)"
	read useSSID
    
	if [[ -z "$useSSID" ]]; then
		echo -e "$warn\n\nYou must specify an SSID..! Come on, think!\n"
		_die "I'm off pal!"
	fi
	
    echo "Which interface are you using for the AP? e.g. wlan0 (required)"
	read useInt
    
	if [[ -z "$useInt" ]]; then
		echo -e "$warn\n\nYou must specify a valid interface..! Come on, think!\n"
		_die "I'm off pal!"
	fi
    
    echo "What channel would you like to run the AP on? (optional)"
	read useChan

 	if [[ ! -z "$useChan" && "$useChan" != " " ]]; then
		allOptsArgs+=" -c $useChan"
	fi

	echo "Which frequency band would you like to use? [5|2.4] (default: 2.4)"
	read useFreq
    
	if [[ ! -z "$useFreq" && "$useFreq" != " " ]]; then
		allOptsArgs+=" --freq-band $useFreq"
	fi
    
    echo "Would you like to specify a BSSID for the AP? (optional)"
	read useBSSID
    
	if [[ ! -z "$useBSSID" && "$useBSSID" != " " ]]; then
		allOptsArgs+=" --mac $useBSSID"
	fi
    
	echo "Would you like to specify a driver to use for the network interface? (default: nl80211)"
	read useDriver
    
    if [[ ! -z "$useDriver" && "$useDriver" != " " ]]; then
		allOptsArgs+=" --driver $useDriver"
	fi
    
    echo "Would you like to show a pop up eTerm window listing the clients as they connect? (optional)"
	read useShowClients
    
	if [[ ! -z "$useShowClients" && "$useShowClients" != " " ]]; then
		openClients=1
	fi
    
    echo "Would you like to specify a Wi-Fi standard to use? (AC or N)"
	read useType
    
	if [[ "$useType" != "AC" && "$useType" != "N" ]]; then
		_error "That wasn't a valid Wi-Fi standard, the options are AC or N"
    	_die "Closing down..."
	fi

	#Set one wi-fi standard only
	if [[ "$useType" == "AC" ]]; then
		allOptsArgs+=" --ieee80211ac"
	fi

	if [[ "$useType" == "N" ]]; then
		allOptsArgs+=" --ieee80211n"
        fi
    fi
    
    #Write vars to config file
    configFile=/etc/dpportal/config/quickstart.cfg
    echo "SSID=$useSSID" > $configFile
    echo "INTERFACE=$useInt" >> $configFile
    echo "CHANNEL=$useChan" >> $configFile
    echo "FREQUENCY=$useFreq" >> $configFile
    echo "BSSID=$useBSSID" >> $configFile
    echo "DRIVER=$useDriver" >> $configFile
    echo "SHOWCLIENTS=$useShowClients" >> $configFile
    echo "USETYPE=$useType" >> $configFile

    #Set final required args
    allOptsArgs+=" $useInt $useSSID"
    
    #Kick off the function to start berate_ap
    startBerate
    
}


function printUsage()
{

	clear
	_printPoweredBy
	_safeExit

}

function postFlight()
{

	clear
    _printPoweredBy
    
    echo -e "$info\nIf you would like to monitor the portal's activity then you can tail the following files:"
    _arrow "For standard output tail: "
    echo -e "$dppOutLog\n\n"
    _arrow "For standard error tail: "
    echo -e "$dppErrLog\n\n"

}
    
    #If user wants it, show connected clients as and when they connect
    if [[ "$openClients" -eq 1 ]]; then
    	#Not sure if this is one one-off list output or a live tail - may need to modify to update list every couple of seconds or something
    	Eterm -g 80x8-0+225 --pointer-color "dark orange" -f DarkOrchid4 -b LightYellow1 -r --font-fx none --buttonbar 0  --scrollbar 0 -q -T "List of mugs as they connect to our roastathon..." -e berate_ap --list-clients $thisBeratePID 2> /dev/null &
	fi
	
    #show running message
	_success "DP_Portal is running, waiting for some absolute mugs to connect and take the phishing bait...!"

}


function _pruneLogs()
{

	#Delete logs older than 7 days
	echo "Pruning logs..." >> $dppOutLog
	find /etc/dpportal/logs/ -mtime +7 -type f -exec rm {} \; > $dppOutLog 2> $dppErrLog

}


function _preFlight()
{

	_pruneLogs

	#set log files
	dStamp=$(date '+%Y%m%d%H%M%S')

	dppErrLogName="DPP_Error_$dStamp.log"
	dppOutLogName="DPP_Output_$dStamp.log"

	touch /etc/dpportal/logs/$dppErrLogName
	touch /etc/dpportal/logs/$dppOutLogName

	dppOutLog="/etc/dpportal/logs/$dppOutLogName"
	dppErrLog="/etc/dpportal/logs/$dppErrLogName"

}


function startBerate()
{

	#Starts berate_ap process with user defined arguements and options outputing stdout and stderr to separate custom files
	berate_ap $allOptsArgs > $dppOutLog 2> $dppErrLog &

	#Put berate_ap's PID into a var
	thisBeratePID=$(echo $!)
    
    postFlight

}


function autoKick() {

	_preFlight
    configExists
    loadQuickStart
    startBerate

}


function welcomeAll()
{

	#Before and frilly output check whether to auto-run, if arguement has been passed it will kick off the autoKick function which requires to user input
	if [[ "$arArg" == "ar" ]]; then
    	autoKick
	fi

	clear
	_printPoweredBy
	_preFlight
    configExists
    if [[ "$quickExists" -eq 1 ]]; then
    	loadQuickStart
    	echo -e "$infoIt looks like there is a config file in place with the values you used last time. Woud you like to start DPPortal with these settings...if not you will be asked to configure these options:\n\n"
        echo "SSID: $useSSID"
		echo "Interface: $useInt"
		echo "Channel: $useChan"
		echo "Frequency band: $useFreq"
		echo "BSSID: $useBSSID"
		echo "Driver: $useDriver"
		if [[ "$useShowClients" -eq 1 ]]; then
        	echo "Tail connected clients log: Yes"
        else
        	echo "Tail connected clients log: No"
        fi
		echo "Wi-Fi Standard: $useType"
		echo "Use these options (y/n)"
        read quickAnswer
        if [[ "$quickAnswer" == "y" ]]; then
        	goingQuick=1
        	startBerate
        elif [[ "$quickAnswer" == "n" ]]; then
        	goingQuick=0
            askQuestions
		fi
	else
    	askQuestions
	fi

}

#Single line that starts program
welcomeAll