#!/bin/bash

#####Setting vars and spitting bars#####

#Set sciptempls for colouring echo lines
warn="\e[1;31m"      # warning (red)
info="\e[1;34m"      # info (blue)
q="\e[1;32m"         # questions (green)

###Some more colour and formatting vars, some may become redundant as I continue to dev and tidy up my project
_bold=$(tput bold)
_underline=$(tput sgr 0 1)
_reset=$(tput sgr0)
_purple=$(tput setaf 171)
_red=$(tput setaf 1)
_green=$(tput setaf 76)
_tan=$(tput setaf 3)
_blue=$(tput setaf 38)


#Define exit function
trap _safeExit SIGINT SIGTERM


# Print logo
function _printPoweredBy()
{
    cat <<"EOF"



  _____  _____        _____   ____  _____ _______       _      
 |  __ \|  __ \      |  __ \ / __ \|  __ \__   __|/\   | |     
 | |  | | |__) |_____| |__) | |  | | |__) | | |  /  \  | |     
 | |  | |  ___/______|  ___/| |  | |  _  /  | | / /\ \ | |     
 | |__| | |          | |    | |__| | | \ \  | |/ ____ \| |____ 
 |_____/|_|          |_|     \____/|_|  \_\ |_/_/    \_\______|
                                                               

  written by: Double_D

Captive portal branding setup.


################################################################
EOF
}



#Check if running as root first
scriptUser=$(id -u)
if [[ $scriptUser -ne 0 ]]; then
	echo -e "$warn\nThis script needs to be run with sudo privileges. Exiting, no changes have been made...\n"
	exit 1
fi

#Function that prints arrow then arguement (just bells and whistles)
function _arrow()
{
    printf "➜ $@"
}

function _success()
{
    printf "${_green}✔ %s${_reset}\n" "$@"
}

function _error() {
    printf "${_red}✖ %s${_reset}\n" "$@"
}

function _die()
{
    _error "$@"
    exit 1
}

function _safeExit()
{
	echo -n -e "$infoExiting DP_Portal."
	for i in $(seq 1 5)
    do
		sleep 0.5
		echo -n "."
	done
	exit 0
}

function has-space {
  [[ "$1" != "${1%[[:space:]]*}" ]] && return 0 || return 1
}

#Gather info on currently installed brands
brandsFile=/etc/dpportal/config/brands.lst
portalWebDir=/var/www/dpportal/
currentBrand=$(cat /etc/dpportal/config/current.conf)
currentBrandF=$(cat $brandsFile | grep $currentBrand | awk '{$(NF--)=""; print}')


###########List installed branding for Captive portal##################


#Display list of currently installed branding packs
function listCurrent()
{

	clear
	_printPoweredBy
	_arrow
	echo -e "$infoList of installed branding.\n\n"
	cat -n $brandsFile | awk '{$(NF--)=""; print}'
	echo -e "$infoThe currently active brand is: \n\n$currentBrandF."
	_arrow "Press any key when you are ready to return to the main menu."
	read -s -n 1 "Waiting for key press..."
	mainMenu

}

function showCurrent()
{

	_arrow
	echo -e "$infoList of installed branding by the short name.\n\n"
	cat -n $brandsFile | awk '{$(NF--)=""; print}'

}

############# Main menu ################


#Main menu
function mainMenu()
{
	clear
	_printPoweredBy
	_arrow
	
	echo -e "$infoWhat would you like to do today?\n\n\n"

	echo -e "\n1. List currently installed branding options.\n"
	echo -e "\n2. Set an installed branding set as the current one to use.\n"
	echo -e "\n3. Install a new brand.\n"
	echo -e "\n\nq. Quit.\n"
	
	echo -e "$info\n\nThe currently installed brand is: $currentBrandF\n\n\n"
	
	read mainMenuChoice
	
	case $mainMenuChoice in
	    
		1)  listCurrent;;
	           
		2)  setBrand;;	
           
		3)  installNewBrand;;
	
		q)  _safeExit;;
        
		*)  trollMsg;;
	
	esac
	
}

############### Set branding ############

function setBrand()
{

	#Shows list of currently installed brandings with corresponding line numbers
	showCurrent
	_arrow
	echo -e "$qWhich branding set would you list to use (enter number from list)...\n\n"
	
    #Reads number input from user
    read brandAnswer
	
    #Refresh screen display
    clear
	_printPoweredBy
	_arrow
	echo -e "$infoSetting brand...\n\n"
	#Gets brand short name from file
    chosenBrand=$(cat $brandsFile | tail -n+$brandAnswer | head -1 | awk '{print $NF}')
    #Gets brand full name from file
    chosenBrandF=$(cat $brandsFile | tail -n+$brandAnswer | head -1 | awk '{$(NF--)=""; print}')
	
    #Copies across site contents
    cp -f /var/www/dpportal/brands/$chosenBrand/* /var/www/dpportal/
    cp -f /var/www/dpportal/brands/indextemplate.html /var/www/dpportal/index.html
    cd /var/www/dpportal
    
    #Sets full name in index file template
    sed -i "s/COMPANYNAME/$chosenBrandF/g" index.html
    
    #Puts short name into current brand config file
	echo $chosenBrand > /etc/dpportal/config/current.conf
	
    #Reloads apache and screen display
    systemctl reload apache2
	sleep 2
    clear
    _printPoweredBy
    _arrow
    
    #Notifies user and exits
    echo -e "$infoThe branding has been successfully set to $chosenBrandF.\n\nThank you, you can now run DPPortal with your new branding setup."
    sleep 1.5
    _safeExit

}

################## Jog on #########

function trollMsg()
{

	clear
	_printPoweredBy
	
    #Kicks user out of script for unexpected menu choice displaying an in-joke from my first IT job that no one else will get
	echo -e "$warn\n\n\nI don't know how, but you fucked up a simple menu choice. Try harder next time!\n\n"
	_die "Someone's a JM...!"

}

################### Create and install new brand ########

function createNewBrand()
{

	#Standard header
	clear
	_printPoweredBy
	
	echo "$info\n\nLets get this new brand setup.\n\n"


	#Get user friendly name of company branding to use
	echo -e "$qWhat's the user friendly name (in proper case, with spaces etc) of the company branding you're going to use? (e.g. Starbucks Coffee)\n\n"
	read newFriendlyName

	if [[ -z "$newFriendlyName" ]]; then
		echo -e "$warn\nThis can't be blank! Bye now. Troll!"
		_error "You done fucked up!"
		sleep 3
		mainMenu
	fi

	#Get shortname to use in folder naming
	echo -e "$qWhat's a shortname for the branding? This cannot contain special characters or spaces! (e.g. for Transport For London use TFL or londontransport etc.)\n\n"
	read newShortName

	if [[ -z "$newShortName" ]]; then
		echo -e "$warnThis can't be blank! Bye now. Troll!"
	    _error "You done fucked up!"
	    sleep 3
	    clear
	    mainMenu
	fi
    
    if [[ $newShortName == *['!'@#\$%^\&*()_+]* ]]; then
		echo -e "$warnYour friendly name has special characters in it! What did I tell you about special charaters in short names?! Plank!"
        _die "Daft bastard...!"
	fi
    
    if has-space $newShortName ; then
    	echo -e "$warnWhat did I tell you about spaces in the short name?! Daft bastard!"
        _die "You done fucked this right up!"
	fi

	_arrow

	#Get background image
	echo -e "$qPlease enter the full file path to a background image for the page in PNG or JPG form only(if it's not big enough, it will end up looking stretched! e.g. /home/me/pic.png)\n\n"
	read chosenBrandGBI

	#Check path not empty string
	if [[ -z "$chosenBrandBGI" ]]; then
		echo -e "$warnThis can't be blank! Bye now. Troll!"
	    _die "You done fucked up!"
	fi

	#Check file type
	bgiFileType=$(identify $chosenBrandBGI | awk '{print $2}')

	if [[ "$bgiFileType" != "JPEG" && "$bgiFileType" != "PNG" ]]; then
		echo -e "$warn\nFam it needs to be an image that exists, of the jpg or png variety.\n"
	    echo -e "$info\nSending you back to the main menu in 5 seconds...\n"
	    sleep 5
	    mainMenu
	fi

	_arrow

	#Get logo image
	echo -e "$qPlease enter the full file path to a small logo/badge image for the new branding. e.g. /path/to/image.jpg\n\n"
	read chosenBrandLogo

	

	if [[ -z "$chosenBrandLogo" ]]; then
		echo -e "$warnThis can't be blank! Bye now. Troll!"
	    _die "You done fucked up!"
	fi
    
    newBLType=$(identify $chosenBrandLogo | awk '{print $2}')

	if [[ "$newBLType" != "JPEG" && "newBLType" != "PNG" ]]; then
		echo -e "$warn\nFam it needs to be an image that exists, of the jpg or png variety.\n"
		echo -e "$info\nSending you back to the main menu in 5 seconds...\n"
		sleep 5
		mainMenu
	fi

	#Make directory for brand
	mkdir -p /var/www/dpportal/brands/$newShortName

	#Copy images to new locations
    if [[ "$bgiFileType" == "JPEG" ]]; then
		cp $chosenBrandBGI /var/www/dpportal/brands/$newShortName/bg-main.jpg
    elif [[ "$bgiFileType" == "PNG" ]];then
		cp $chosenBrandBGI /var/www/dpportal/brands/$newShortName/bg-main.png
    fi
    
    if [[ "$newBLType" == "JPEG" ]]; then
    	cp $chosenBrandLogo /var/www/dpportal/brands/$newShortName/logo-main.jpg
	elif [[ "$newBLType" == "PNG" ]]; then
    	cp $chosenBrandLogo /var/www/dpportal/brands/$newShortName/logo-main.png
	fi


	#Add brand to list file
	echo "$newFriendlyName $newShortName" >> /etc/dpportal/config/brands.lst
    
    #Inform user branding installed but not set and sends them back to the main menu
    echo -e "$info\nYour new branding has been installed, you must select it as the active one by returning to the main menu and selecting option 2. \n\nPress any key to return to the main menu..."
    read -s -n 1 "Waiting for key press..."
    mainMenu
    

}

#Single code line to start process
mainMenu