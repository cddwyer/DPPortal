#!/bin/bash

#####Setting vars and spitting bars#####

#Set sciptempls for colouring echo lines
warn="\e[1;31m"      # warning (red)
info="\e[1;34m"      # info (blue)
q="\e[1;32m"         # questions (green)

###Some more colour and formatting vars, some may become redundant as I continue to dev and tidy up my project
_bold=$(tput bold)
_underline=$(tput sgr 0 1)
_reset=$(tput sgr0)
_purple=$(tput setaf 171)
_red=$(tput setaf 1)
_green=$(tput setaf 76)
_tan=$(tput setaf 3)
_blue=$(tput setaf 38)

#Check if running as root first
scriptUser=$(id -u)
if [[ $scriptUser -ne 0 ]]; then
	echo -e "$warn\nThis script needs to be run with sudo privileges. Exiting, no changes have been made...\n"
	exit 1
fi

#DB char set
export LC_CTYPE=C
export LANG=C

echo -e "$info\nGathering some info...\n"

#Define install dir
installDir=$(echo $PWD)

#Create base directories
mkdir -p /etc/dpportal
mkdir -p /etc/dpportal/run
mkdir -p /etc/dpportal/config

#Current user
curUser=$(who | awk '{print $1}' | head -1)

#Check mysql binary exec location
BIN_MYSQL=$(which mysql)

#DB config file set
configDir=/etc/dpportal/config

#Touch database config file
touch $configDir/db.cfg
dbcfgFile=$configDir/db.cfg


#Generate random DB password

function generatePassword()
{
    echo "$(openssl rand -base64 12)"
}

#DB vars set calling random password generator function to set db password
DB_HOST='localhost'
DB_NAME='dpportal'
DB_USER='dpportaluser'
DB_PASS=$(generatePassword)

function _printPoweredBy()
{
    cat <<"EOF"



  _____  _____        _____   ____  _____ _______       _      
 |  __ \|  __ \      |  __ \ / __ \|  __ \__   __|/\   | |     
 | |  | | |__) |_____| |__) | |  | | |__) | | |  /  \  | |     
 | |  | |  ___/______|  ___/| |  | |  _  /  | | / /\ \ | |     
 | |__| | |          | |    | |__| | | \ \  | |/ ____ \| |____ 
 |_____/|_|          |_|     \____/|_|  \_\ |_/_/    \_\______|
                                                               

  written by: Double_D




################################################################
EOF
}


#Function that prints arrow then arguement (just bells and whistles)
function _arrow()
{
    printf "➜ $@\n"
}

function _success()
{
    printf "${_green}✔ %s${_reset}\n" "$@"
}

function _error() {
    printf "${_red}✖ %s${_reset}\n" "$@"
}

function _die()
{
    _error "$@"
    exit 1
}

function _safeExit()
{
    exit 0
}


function getUserConsent()
{

echo -e "$infoThis will install DPPortal, all it's content and dependant packages, do you wish to continue? If not press control C, other with press any key to continue."
read -s -n 1 "Waiting for key press..."

}


#Function to create database if it doesnt exist already and grabs root password if needed
function createDBStuff()
{
    SQL1="CREATE DATABASE IF NOT EXISTS ${DB_NAME};"
    SQL2="CREATE USER '${DB_USER}'@'%' IDENTIFIED BY '${DB_PASS}';"
    SQL3="GRANT ALL PRIVILEGES ON ${DB_NAME}.* TO '${DB_USER}'@'%';"
    SQL4="FLUSH PRIVILEGES;"

    if [ -f /root/.my.cnf ]; then
    	echo -e "$info\nCreating MySQL user and database...\n"
        $BIN_MYSQL -e "${SQL1}${SQL2}${SQL3}${SQL4}"
        if [[ $? -eq 0 ]]; then
        	clear
            _printPoweredBy
            echo -e "\n\n\n\n\n"
            echo "host=$DB_HOST" > $dbcfgFile
            echo "database=$DB_NAME" >> $dbcfgFile
            echo "dbuser=$DB_USER" >> $dbcfgFile
            echo "dbpass=$DB_PASS" >> $dbcfgFile
            clear
            _printPoweredBy
            _success "Database $DB_NAME and user $DB_USER has been created with necessary permissions granted..."
        else
        	_error "There was a problem creating the database and/or user."
            echo -e "$warn\nDo you want to exit the installer now or continue on with the install and troubleshoot the DB later?(y/n)\n"
            read exitReply
				if [ "$exitReply" = "y" ] | [ "$exitReply" = "Y" ]; then
                	clear
                    _printPoweredBy
					echo "host=$DB_HOST" > $dbcfgFile
					echo "database=$DB_NAME" >> $dbcfgFile
					echo "dbuser=$DB_USER" >> $dbcfgFile
					echo "dbpass=$DB_PASS" >> $dbcfgFile
                    echo -e "$info\n\nYou have chosen to exit, the database config file has been created with values but you still need to check MySQL/MariaDB, exiting....\n\n"
                    _safeExit
                fi
        fi
    else
        # If /root/.my.cnf doesn't exist then it'll ask for root password
        _arrow "Please enter root MySQL/MariaDB user password!"
        read rootPassword
        echo -e "$info\nCreating MySQL user and database...\n"
        $BIN_MYSQL -h $DB_HOST -u root -p${rootPassword} -e "${SQL1}${SQL2}${SQL3}${SQL4}"
        sleep 2
        if [[ $? - eq 0 ]]; then
        	clear
            _printPoweredBy
            echo -e "\n\n\n\n\n"
            echo "host=$DB_HOST" > $dbcfgFile
            echo "database=$DB_NAME" >> $dbcfgFile
            echo "dbuser=$DB_USER" >> $dbcfgFile
            echo "dbpass=$DB_PASS" >> $dbcfgFile
            _success "Database $DB_NAME and user $DB_USER has been created and necessary permissions have been granted..."
        else
        	_error "There was a problem creating the database and/or user."
            echo -e "$warn\nDo you want to exit the installer now or continue on with the install and troubleshoot the DB later?(y/n)\n"
            read exitReply
			if [ "$exitReply" = "y" ] | [ "$exitReply" = "Y" ]; then
				echo "host=$DB_HOST" > $dbcfgFile
            	echo "database=$DB_NAME" >> $dbcfgFile
            	echo "dbuser=$DB_USER" >> $dbcfgFile
            	echo "dbpass=$DB_PASS" >> $dbcfgFile
                clear
                _printPoweredBy
                echo -e "$info\n\nYou have chosen to exit, but the database config file has been created with values, you still need to check MySQL/MariaDB, exiting....\n\n"
                _safeExit
            fi
        fi
    fi
}

function setHostsFile()
{
	
    #Copy Hosts file and preserve current POSIX permissions
    cp --preserve /etc/hosts /etc/dpportal/config/dpphosts
    
    sleep 0.5
    
    #Add our sites to hosts file
	sed -i '/^127.0.0.1*/a 127.0.0.1\	captive.dpportal.co.uk\n127.0.1.2\	display.dpportal.co.uk' /etc/dpportal/config/dpphosts
	sleep 1
}

function checkPreReqs()
{

	#Check if Apache has PHP enabled
	apachePM=$(dpkg --get-selections | grep -c 'libapache2-mod-php')

	if [[ $apachePM -le 0 ]]; then
		echo -e "$warn\nIt looks like either PHP isn't installed or isn't enabled in Apache2, \nplease ensure its installed and enabled and run this installer again."
		exit 1
    else
    
    
	fi

	apacheRun=$(systemctl status apache2 | grep Active\:\ active)

	if [[ ! -z $apacheRun ]]; then
		echo -e "$info\nApache2 is not running. \nAttempting to start..."
		systemctl start apache2
		sleep 4
		apacheRunNow$(systemctl status apache2 | grep Active\:\ active)
		sleep 1
		if [[ ! -z $apacheRunNow ]]; then
			echo "There were problems starting Apache, you should look into that!"
        else
        	clear
		fi
	fi

	isBerate=$(dpkg --get-selections | grep -c 'berate-ap')
	if [[ $isBerate -eq 0 ]]; then
		echo -e "$q\nDependent package Berate_AP doesn't look like its installed, \nShall we try and install it now? [yes/no]"
		read berateAnswer
		if [[ "$berateAnswer" == "yes" ]]; then
        	clear
			apt update && apt install -y berate-ap
            	if [[ $? -ne 0 ]]; then
                	echo -e "$warn\nLooks like the command to install Berate_AP didn't exit with code 0\n" 
                    echo -e "$q\nShall we continue anyway? [yes/no]\n"
                    read contAnyAns
                    if [[ "$contAnyAns" != "yes" ]]; then
                    	clear
                        echo -e "$warn\nLooks like we're done here then, exiting...\n"
                        exit 1
                    fi
				fi
		else
			echo -e "$warn\nWithout Berate_AP this noble phishing tool will nae work. \nExiting installer..."
		fi
	fi
    
    
}


function installContent()
{

    #Log directories and files
    
    mkdir -p /var/log/apache2/dpportal
    mkdir -p /etc/dpportal/logs
    
    # !! Action moved to bootstrap functions '_pruneLogs()' and/or 'preFlight()'
    #touch /etc/dpportal/logs/dpp-error.log
    #touch /etc/dpportal/logs/dpp-output.log
	
	#Install fake portal site content
    
	rsync -rlptgoD  $installDir/data/sites/* /var/www/

	#Disable any current sites in Apache2
    
    echo -e "$info\nDisabling existing sites running in Apache2\n"
    rm -rf /etc/apache2/sites-enabled/*
    systemctl reload apache2
    sleep 2

	#Install site configs
    
	rsync -rlptgoD $installDir/config/sites/dpportal.conf /etc/apache2/sites-available/
	rsync -rlptgoD $installDir/config/sites/dppoptions.conf /etc/apache2/sites-available/
    rsync -rlptgoD $installDir/config/sites/dppdisplay.conf /etc/apache2/sites-available/
	
    # Enable sites and reload Apache service
    
    a2ensite dpportal.conf
	a2ensite dppoptions.conf
    a2ensite dppdisplay.conf
    systemctl reload apache2
    
    #Make binary sym link
    
    ln -s /etc/dpportal/run/dpportal.sh /usr/bin/dpportal
    

}

clear
_printPoweredBy
checkPreReqs
createDBStuff
setHostsFile
installContent